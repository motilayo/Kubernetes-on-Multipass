---
- name: Hold kubeadm
  ansible.builtin.dpkg_selections:
    name: kubeadm
    selection: hold

- name: Hold kubectl
  ansible.builtin.dpkg_selections:
    name: kubectl
    selection: hold

- name: Hold kubelet
  ansible.builtin.dpkg_selections:
    name: kubelet
    selection: hold

- name: Set service account issuer URL fact
  ansible.builtin.set_fact:
    SA_ISSUER_URL: "{{ config.apiServerConfigurations.saIssuerUrl }}"

- name: Check for lb
  become: false
  ansible.builtin.shell: set -o pipefail && multipass ls | grep loadbalancer > /dev/null 2>&1; echo $?
  register: LB_EXISTS
  delegate_to: localhost
  # changed_when: LB_EXISTS.stdout == "1"

- name: Set control plane endpoint without loadbalancer
  ansible.builtin.set_fact:
    CTRLPLN_ENDPOINT: "{{ hostvars[groups['control'][0]].ansible_host }}"
  when: LB_EXISTS.stdout == "1"

- name: Set control plane endpoint with loadbalancer
  ansible.builtin.set_fact:
    CTRLPLN_ENDPOINT: "{{ hostvars[groups['loadbalancer'][0]].ansible_host }}"
  when: LB_EXISTS.stdout == "0"

- name: Set KUBERNETES VERSION in kubeadm config template
  ansible.builtin.set_fact:
    KUBERNETES_VERSION: "{{ KUBERNETES_VERSION }}"

- name: Render kubeadm-config.yaml
  become: false
  ansible.builtin.template:
    src: ./kubeadm-config-template.j2
    dest: ./kubeadm-config.yaml

- name: Kubeadm reset
  ansible.builtin.shell: kubeadm reset --force && kubeadm reset phase cleanup-node
- name: Create .kube directory
  become_user: ubuntu
  ansible.builtin.file:
    path: $HOME/.kube
    state: directory
    mode: "0755"
  register: kube_path
  when: "'control' in group_names"

- name: Initialize the first control node
  ansible.builtin.command: kubeadm init --config=kubeadm-config.yaml --upload-certs
  register: kubeadm_init

- name: Debug kubeadm init
  ansible.builtin.debug:
    msg:
      - "{{ kubeadm_init.stdout }}"

- name: Create .kube directory
  become_user: ubuntu
  ansible.builtin.file:
    path: $HOME/.kube
    state: directory
    mode: "0755"
  register: kube_path

- name: Copy admin.conf to .kube dir
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ kube_path.path }}/config"
    remote_src: true
    owner: ubuntu

# - name: install Pod network
#   become: false
#   shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

- name: Copy admin.conf to local
  ansible.builtin.fetch:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    flat: true
