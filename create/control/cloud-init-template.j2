#cloud-init

# create ssh passwordless user
users:
  - name: ubuntu
    home: /home/ubuntu
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - {{ public_key }}

bootcmd:
  - sudo swapoff -a

# create files
write_files:
  - path: /etc/systemd/resolved.conf
    append: true
    content: |
      MulticastDNS=yes

  - path: /etc/systemd/system/mdns@.service
    content: |
      [Service]
      Type=oneshot
      ExecStart=/usr/bin/resolvectl mdns %i yes

      [Install]
      WantedBy=sys-subsystem-net-devices-%i.device

  - path: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter

  - path: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1

  - path: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 10
      debug: true

  - path: /etc/default/kubelet 
    content: |
      KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint='unix:///run/containerd/containerd.sock'
                                                
  - path: /etc/containerd/config.toml
    content: |
      version = 2

      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true

runcmd:
  - sudo sysctl --system
  - systemctl restart systemd-resolved.service
  - systemctl start mdns@enp0s1.service
  - systemctl enable mdns@enp0s1.service
  - sudo modprobe overlay
  - sudo modprobe br_netfilter

package_upgrade: true
package_reboot_if_required: true