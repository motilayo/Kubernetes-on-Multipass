---
- name: hold packages
  shell: apt-mark hold kubelet kubeadm kubectl

- name: kubeadm reset
  shell: kubeadm reset --force && kubeadm reset phase cleanup-node

- name: generate certificate key
  shell: kubeadm certs certificate-key
  register: CERT_KEY
  when: "'1' in inventory_hostname" 

- name: render kubeadm-config.yaml
  become: false
  template:
    src: "{{ playbook_dir }}/kubeadm-config-template.j2"
    dest: "{{ playbook_dir }}/kubeadm-config.yaml"
  delegate_to: localhost
  vars:
    certificate_key: "{{ CERT_KEY.stdout }}"
  when: "'1' in inventory_hostname"

- name: copy kubeadm file
  copy:
    src: "{{ playbook_dir }}/kubeadm-config.yaml"
    dest: /home/ubuntu/kubeadm-config.yaml
    owner: ubuntu
  register: kadm_file
  when: "'1' in inventory_hostname"

- name: initialize the first control node
  shell: kubeadm init --config {{kadm_file.dest}} --upload-certs
  register: kubeadm_init
  when: "'1' in inventory_hostname"

- name: debug kubeadm init
  debug:
    msg:
      - "{{ kubeadm_init.stdout }}"
  when: "'1' in inventory_hostname"

- name: create .kube directory
  become_user: ubuntu
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755
  register: kube_path

- name: copy admin.conf to .kube dir
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{kube_path.path}}/config"
    remote_src: yes
    owner: ubuntu
  when: "'1' in inventory_hostname"

- name: get join command
  become: false
  shell: kubeadm token create --print-join-command
  register: JOIN_COMMAND
  when: "'1' in inventory_hostname"

- name: set facts join command & cert
  set_fact:
    join_command: "{{ hostvars[groups['control'][0]]['JOIN_COMMAND']['stdout'] }}"
    cert_key : "{{ hostvars[groups['control'][0]]['CERT_KEY']['stdout'] }}"
  when: "'1' not in inventory_hostname"

- name: debug join command for control plane
  debug:
    msg: 
      - "{{ join_command }} --control-plane --certificate-key {{ cert_key }}"
  when: "'1' not in inventory_hostname"

- name: install Pod network
  become: false
  shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  when: "'1' in inventory_hostname"

- name: join other control plane nodes
  shell: "{{ join_command }} --control-plane --certificate-key {{ cert_key }}"
  register: join_cmd_output
  when: "'1' not in inventory_hostname"

- name: debug join control plane nodes
  debug:
    msg:
      - "{{ join_cmd_output.stdout }}"
  when: "'1' not in inventory_hostname"

- name: copy admin.conf to the .kube dir
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{kube_path.path}}/config"
    remote_src: yes
    owner: ubuntu
  when: "'1' not in inventory_hostname"
 

- name: copy admin.conf to local
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: "~/.kube/config"
    flat: yes