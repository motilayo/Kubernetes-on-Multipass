---
- name: Render cloud-init file
  ansible.builtin.template:
    src: cloud-init-template.j2
    dest: cloud-init.yaml
  delegate_to: localhost
  vars:
    public_key: "{{ sshkey.public_key }}"
  run_once: true

- name: Set cloud-init file path
  ansible.builtin.set_fact:
    CLOUD_INIT_PATH: cloud-init.yaml

- name: Render cloud-init file
  ansible.builtin.template:
    src: loadbalancer/cloud-init-template.j2
    dest: loadbalancer/cloud-init.yaml
  delegate_to: localhost
  vars:
    public_key: "{{ sshkey.public_key }}"
  when: clusterConfig.vmType == 'loadbalancer'

- name: Set cloud-init file path
  ansible.builtin.set_fact:
    CLOUD_INIT_PATH: loadbalancer/cloud-init.yaml
  when: clusterConfig.vmType == 'loadbalancer'

- name: Create vm
  ansible.builtin.shell: |
    export VMNAME="{{ clusterConfig.vmType }}-node-{{ item }}"
    export SPEC="{{ clusterConfig.spec }}"
    if [[ -z $(multipass ls --format json | jq -c '.list[] | select(.name == env.VMNAME)') ]]; then
      multipass launch oracular $SPEC --cloud-init {{ CLOUD_INIT_PATH }} --name $VMNAME > /dev/null 2>&1
    else
      echo "multipass vm $VMNAME already exists"
    fi
    multipass info $VMNAME
  register: cmd_output
  with_sequence: count="{{ clusterConfig.nodeCount }}"
  loop_control:
    pause: 5

- name: Debug output
  ansible.builtin.debug:
    msg:
      - "{{ item.stdout_lines }}"
  with_items: "{{ cmd_output.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Start vm
  ansible.builtin.command: multipass start {{ clusterConfig.vmType }}-node-{{ item }}
  with_sequence: count="{{ clusterConfig.nodeCount }}"

- name: Wait for vm restart
  ansible.builtin.shell: multipass info {{ clusterConfig.vmType }}-node-{{ item }} --format json | jq -r '.info | .[keys[0]].state'
  register: vm_status
  until: vm_status.stdout == 'Running'
  retries: 10
  delay: 10
  with_sequence: count="{{ clusterConfig.nodeCount }}"

- name: Map node name to node IP address
  ansible.builtin.shell: multipass info {{ clusterConfig.vmType }}-node-{{ item }} --format json | jq -r '.info | "\(keys[0]):\(.[keys[0]].ipv4[0])"'
  register: vm_info
  with_sequence: count="{{ clusterConfig.nodeCount }}"

- name: Create inventory file
  ansible.builtin.copy:
    content: |
      {{ clusterConfig.vmType }}:
        hosts:
    dest: ../inventories/{{ clusterConfig.vmType }}.yaml
  delegate_to: localhost

- name: Update inventory
  ansible.builtin.blockinfile:
    dest: ../inventories/{{ clusterConfig.vmType }}.yaml
    marker: "#{{ item.stdout.split(':')[0] }}#"
    block: |2
          {{ item.stdout.split(':')[0] }}:
            ansible_connection: ssh
            ansible_host: {{ item.stdout.split(':')[1] }}
            ansible_user: ubuntu
            ansible_ssh_private_key_file: {{ sshkey.filename }}
  with_items: "{{ vm_info.results }}"
  loop_control:
    label: "{{ item.item }}"
