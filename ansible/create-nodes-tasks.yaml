---
- name: generate SHH key
  openssh_keypair:
    path: /tmp/id_ssh_rsa
    type: rsa
    size: 4096
    state: present
    force: no
  register: sshkey

- name: add public key to cloud-init file
  template:
    src: "../{{ clusterConfig.nodeType }}/cloud-init-template.j2"
    dest: "../{{ clusterConfig.nodeType }}/cloud-init.yaml"
  delegate_to: localhost
  vars:
    public_key: "{{ sshkey.public_key }}"

- name: create nodes
  shell: |
    export NODENAME="{{ clusterConfig.nodeType }}-node-{{ item }}"
    export SPEC="{{ clusterConfig.spec }}"
    export CLOUD_INIT_PATH="../{{ clusterConfig.nodeType }}/cloud-init.yaml"
    if [[ -z $(multipass ls --format json | jq -c '.list[] | select(.name == env.NODENAME)') ]]; then
      multipass launch $SPEC --cloud-init $CLOUD_INIT_PATH --name $NODENAME -vvvv
    else
      echo "multipass vm $NODENAME already exists"
      
    fi 
  register: cmd_output
  with_sequence: count="{{ clusterConfig.nodeCount }}"
  loop_control:
    pause: 10

- debug: 
    msg:
      "{{ item.stdout }}"
  with_items: "{{ cmd_output.results }}"
  loop_control: 
    label: "{{ item.item}}"

- name: start nodes
  shell: multipass start --all

- name: wait for node restart
  shell: multipass info {{ clusterConfig.nodeType }}-node-{{ item }} --format json | jq -r '.info | .[keys[0]].state'
  register: vm_status
  until: vm_status.stdout == 'Running'
  retries: 10
  delay: 10
  with_sequence: count="{{ clusterConfig.nodeCount }}"

- name: map node name to node IP address
  shell: multipass info {{ clusterConfig.nodeType }}-node-{{ item }} --format json | jq -r '.info | "\(keys[0]):\(.[keys[0]].ipv4[0])"'
  register: vm_info
  with_sequence: count="{{ clusterConfig.nodeCount }}"

- name: create inventory file                                                                                
  copy:                                                                                              
    content: |
      {{ clusterConfig.nodeType }}:
        hosts:
    dest: "./inventories/{{ clusterConfig.nodeType }}.yaml"
  delegate_to: localhost 

- name: add node details to inventory file
  blockinfile:
    dest: "./inventories/{{ clusterConfig.nodeType }}.yaml"
    marker: "#{{ item.stdout.split(':')[0] }}#"
    block: |2
          {{ item.stdout.split(':')[0] }}:
            ansible_connection: ssh
            ansible_host: {{ item.stdout.split(':')[1] }}
            ansible_user: ubuntu
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o ControlMaster=no -o ControlPath=none"
            ansible_ssh_private_key_file: {{ sshkey.filename }}
  with_items: "{{ vm_info.results }}"