---
# apt maintenance
- name: Update and upgrade apt packages
  apt:
    upgrade: true
    update_cache: true

# kube upgrades
- name: Unhold kubeadm
  dpkg_selections:
    name: kubeadm
    selection: install

- name: Adding apt repository for Kubernetes
  deb822_repository:
    name: kubernetes
    types: deb
    uris: https://pkgs.k8s.io/core:/stable:/v1.33/deb/
    suites: [/]
    state: present
    enabled: yes
    architectures: arm64
    signed_by: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key

- name: install new kubeadm version
  apt:
    name: kubeadm={{ upgrade_version }}-1.1
    allow_downgrade: true
    update_cache: true

- name: Hold kubeadm
  dpkg_selections:
    name: kubeadm
    selection: hold

- name: kubeadm version
  shell: kubeadm version -o yaml
  register: kubeadm_version

- name: show kubeadm version
  debug:
    msg: "{{ kubeadm_version.stdout }}"

- name: kubeadm upgrade plan
  shell: kubeadm upgrade plan
  register: kubeadm_upgrade_plan
  when: ansible_hostname == groups.control[0]

- name: show kubeadm upgrade plan
  debug:
    msg: "{{ kubeadm_upgrade_plan.stdout }}"
  when: ansible_hostname == groups.control[0]

- name: kubeadm upgrade first control plane node
  shell: kubeadm upgrade apply v{{ upgrade_version }} -y
  register: kubeadm_upgrade_first_cp
  when: ansible_hostname == groups.control[0]

- name: show kubeadm upgrade first control plane node
  debug:
    msg: "{{ kubeadm_upgrade_first_cp.stdout }}"
  when: ansible_hostname == groups.control[0]

- name: create .kube directory
  become_user: ubuntu
  file:
    path: $HOME/.kube
    state: directory
    mode: "0755"
  register: kube_path
  when: ansible_hostname == groups.control[0]

- name: copy admin.conf to .kube dir
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{kube_path.path}}/config"
    remote_src: true
    owner: ubuntu
  when: ansible_hostname == groups.control[0]

- name: copy admin.conf to local
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    flat: true
  run_once: true
  when: ansible_hostname == groups.control[0]

- name: kubeadm upgrade node
  shell: kubeadm upgrade node
  register: kubeadm_upgrade
  when: ansible_hostname != groups.control[0]

- name: show kubeadm upgrade node
  debug:
    msg: "{{ kubeadm_upgrade.stdout }}"
  when: ansible_hostname != groups.control[0]

- name: drain node
  delegate_to: localhost
  become: false
  kubernetes.core.k8s_drain:
    state: drain
    name: "{{ inventory_hostname }}"
    delete_options:
      ignore_daemonsets: true
      # force: true
      delete_emptydir_data: true

- name: Unhold kubelet
  dpkg_selections:
    name: kubelet
    selection: install

- name: Unhold kubectl
  dpkg_selections:
    name: kubectl
    selection: install

- name: install kubelet & kubectl
  apt:
    name:
      - kubelet={{ upgrade_version }}-1.1
      - kubectl={{ upgrade_version }}-1.1
    update_cache: true

- name: Hold kubelet
  dpkg_selections:
    name: kubelet
    selection: hold

- name: Hold kubectl
  dpkg_selections:
    name: kubectl
    selection: hold

- name: kubelet version
  shell: kubelet --version
  register: kubelet_version

- name: show kubelet version
  debug:
    msg: "{{ kubelet_version.stdout }}"

- name: pause
  pause:
    seconds: 15
  when: ansible_hostname == groups.control[0]

- name: kubectl server version
  become: false
  shell: kubectl version -o yaml
  register: kubectl_server_version
  when: ansible_hostname == groups.control[0]

- name: show kubectl server version
  debug:
    msg: "{{ kubectl_server_version.stdout }}"
  when: ansible_hostname == groups.control[0]

- name: kubectl client version
  become: false
  shell: kubectl version --client -o yaml
  register: kubectl_client_version

- name: show kubectl client version
  debug:
    msg: "{{ kubectl_client_version.stdout }}"

- name: daemon-reload
  systemd:
    daemon_reload: true

- name: restart kubelet
  service:
    name: kubelet
    state: restarted

- name: uncordon node
  delegate_to: localhost
  become: false
  kubernetes.core.k8s_drain:
    state: uncordon
    name: "{{ inventory_hostname }}"

- name: Remove useless packages from the cache
  apt:
    autoclean: true

- name: Remove dependencies that are no longer required
  apt:
    autoremove: true